apiVersion: v1
kind: ConfigMap
metadata:
  name: mirror-rabbit-config
data:
  enabled_plugins: |
    [
      rabbitmq_management,
      rabbitmq_peer_discovery_k8s
    ].
  rabbitmq.conf: |
    ## Clustering
    #  * https://www.rabbitmq.com/cluster-formation.html#peer-discovery-k8s
    cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local

    # Use the Pods hostname instead of IP addresses to create a cluster.
    # The Pod IP doesn't work with persistence because new Pods get a new IP addresses,
    # that doesn't have access to existing data after the node name has changed.
    cluster_formation.k8s.address_type = hostname
    cluster_formation.node_cleanup.interval = 10

    # Set to false if automatic removal of unknown/absent nodes
    # is desired. This can be dangerous, see
    #  * http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup
    #  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal

    ## queue master locator
    queue_master_locator = min-masters

    ## The default "guest" user is only permitted to access the server
    ## via a loopback interface (e.g. localhost)
    ## See http://www.rabbitmq.com/access-control.html#loopback-users
    loopback_users.guest = false

    ## Randomized startup delay in such scenarios can use a significantly lower delay value range (e.g. 0 to 1 second):
    cluster_formation.randomized_startup_delay_range.min = 0
    cluster_formation.randomized_startup_delay_range.max = 2

    # management.load_definitions = /etc/definitions/definitions.json
  definitions.json: |
    {}
---
apiVersion: v1
kind: Secret
metadata:
  name: mirror-rabbit-secret
  labels:
    app: mirror-rabbit
type: Opaque
data:
  rabbitmq-erlang-cookie: ZXJsYW5nLWNvb2tpZQ==  # erlang-cookie
  rabbitmq-user: YWRtaW4=  # admin
  rabbitmq-pass: cGFzczEyMzQ=  # pass1234
  rabbitmq-vhost: bWFpbg==  # main
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mirror-rabbit
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: endpoint-reader
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: mirror-rabbit-endpoint-reader
subjects:
- kind: ServiceAccount
  name: mirror-rabbit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: endpoint-reader
---
kind: Service
apiVersion: v1
metadata:
  name: mirror-rabbit-headless
  labels:
    app: mirror-rabbit
spec:
  type: ClusterIP
  clusterIP: None
  ports: 
    - name: epmd
      protocol: TCP
      port: 4369
      targetPort: epmd
    - name: amqp1
      protocol: TCP
      port: 5671
      targetPort: amqp1
    - name: amqp2
      protocol: TCP
      port: 5672
      targetPort: amqp2
    - name: http
      protocol: TCP
      port: 15672
      targetPort: http
    - name: clitool
      protocol: TCP
      port: 25672
      targetPort: clitool
  selector:
    app: mirror-rabbit
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mirror-rabbit
  labels:
    app: mirror-rabbit
spec:
  serviceName: mirror-rabbit-headless
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: mirror-rabbit
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: mirror-rabbit
    spec:
      serviceAccountName: mirror-rabbit
      terminationGracePeriodSeconds: 10
      initContainers:
      # 用環境變數給 default user password & vhost 時會去讀寫 rabbitmq.conf
      # 故先複製一個可讀寫的 rabbitmq.conf 到 emptyDir
      # 在掛載到真正運行的 rabbitmq 裡面
      - name: copy-rabbitmq-config
        image: rabbitmq:3.7.15-alpine
        imagePullPolicy: IfNotPresent
        command:
        - /bin/ash
        - -euc
        - |
          # Remove cached erlang cookie since we are always providing it,
          # that opens the way to recreate the application and access to existing data
          # as a new erlang will be regenerated again.
          rm -f /var/lib/rabbitmq/.erlang.cookie
          # Copy the mounted configuration to both places.
          cp /rabbitmqconfig/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf
          cp /rabbitmqconfig/enabled_plugins /etc/rabbitmq/enabled_plugins
        volumeMounts:
        - mountPath: /rabbitmqconfig
          name: config-volume
        - mountPath: /etc/rabbitmq
          name: editable-config
        - mountPath: /var/lib/rabbitmq
          name: mirror-rabbit-pvc
      containers:
      - name: rabbitmq
        image: rabbitmq:3.7.15-alpine
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/ash
              - -c
              - |
                # Wait for the RabbitMQ to be ready.
                until rabbitmqctl node_health_check; do
                  sleep 1
                done
                # By default, RabbitMQ does not have Highly Available policies enabled,
                # using the following command to enable it.
                rabbitmqctl -p ${RABBITMQ_DEFAULT_VHOST} set_policy ha-all "." '{"ha-mode":"all", "ha-sync-mode":"automatic"}' --apply-to all --priority 0
        ports:
        - name: epmd
          protocol: TCP
          containerPort: 4369
        - name: amqp1
          protocol: TCP
          containerPort: 5671
        - name: amqp2
          protocol: TCP
          containerPort: 5672
        - name: http
          protocol: TCP
          containerPort: 15672
        - name: clitool
          protocol: TCP
          containerPort: 25672
        resources:
          limits:
            cpu: "1000m"
            memory: "2048Mi"
          requests:
            cpu: "300m"
            memory: "512Mi"
        livenessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 60
          timeoutSeconds: 30
        # livenessProbe:
        #   exec:
        #     command:  # Authorization => echo -n admin:pass1234 | base64
        #     - /bin/sh
        #     - -c
        #     - 'wget -O - -q --header "Authorization: Basic YWRtaW46cGFzczEyMzQ=" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
        #   initialDelaySeconds: 60
        #   periodSeconds: 60
        #   timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 20
          timeoutSeconds: 30
        # readinessProbe:
        #   exec:
        #     command:
        #     - /bin/sh
        #     - -c
        #     - 'wget -O - -q --header "Authorization: Basic YWRtaW46cGFzczEyMzQ=" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
        #   initialDelaySeconds: 20
        #   periodSeconds: 60
        #   timeoutSeconds: 5
        env:
        - name: SELF_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SELF_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        # 取代 cluster_formation.k8s.service_name
        - name: K8S_SERVICE_NAME
          value: mirror-rabbit-headless
        # 取代 cluster_formation.k8s.hostname_suffix
        - name: K8S_HOSTNAME_SUFFIX
          value: ".$(K8S_SERVICE_NAME).$(SELF_POD_NAMESPACE).svc.cluster.local"
        - name: RABBITMQ_NODENAME
          value: "rabbit@$(SELF_POD_NAME).$(K8S_SERVICE_NAME).$(SELF_POD_NAMESPACE).svc.cluster.local"
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: mirror-rabbit-secret
              key: rabbitmq-user
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: mirror-rabbit-secret
              key: rabbitmq-pass
        - name: RABBITMQ_DEFAULT_VHOST
          valueFrom:
            secretKeyRef:
              name: mirror-rabbit-secret
              key: rabbitmq-vhost
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: mirror-rabbit-secret
              key: rabbitmq-erlang-cookie
        volumeMounts:
        - name: editable-config
          mountPath: /etc/rabbitmq
        # - name: definitions-volume
        #   mountPath: /etc/definitions
        - name: mirror-rabbit-pvc
          mountPath: /var/lib/rabbitmq
      volumes:
      - name: config-volume
        configMap:
          name: mirror-rabbit-config
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
          - key: enabled_plugins
            path: enabled_plugins
      - name: editable-config
        emptyDir: {}
      # - name: definitions-volume
      #   configMap:
      #     name: mirror-rabbit-config
      #     items:
      #     - key: definitions.json
      #       path: definitions.json
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - mirror-rabbit
            topologyKey: kubernetes.io/hostname  # should be find on node labels
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: cloud.google.com/gke-nodepool  # should be find on node labels
                operator: In
                values:
                - statefulset-pool  # should be find on node labels
  volumeClaimTemplates:
  - metadata:
      name: mirror-rabbit-pvc
      labels:
        app: mirror-rabbit
    spec:
      accessModes:
      - "ReadWriteOnce"
      storageClassName: standard
      resources:
        requests:
          storage: "5Gi"