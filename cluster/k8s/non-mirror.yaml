apiVersion: v1
kind: ConfigMap
metadata:
  name: non-mirror-rabbit-config
  namespace: production
data:
  enabled_plugins: |
    [
      rabbitmq_shovel,
      rabbitmq_shovel_management,
      rabbitmq_federation,
      rabbitmq_federation_management,
      rabbitmq_management,
      rabbitmq_peer_discovery_k8s
    ].
  rabbitmq.conf: |
    ## Clustering
    #  * https://www.rabbitmq.com/cluster-formation.html#peer-discovery-k8s
    cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local

    # Use the Pods hostname instead of IP addresses to create a cluster.
    # The Pod IP doesn't work with persistence because new Pods get a new IP addresses,
    # that doesn't have access to existing data after the node name has changed.
    cluster_formation.k8s.address_type = hostname
    cluster_formation.node_cleanup.interval = 10

    # Set to false if automatic removal of unknown/absent nodes
    # is desired. This can be dangerous, see
    #  * http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup
    #  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal

    ## queue master locator
    queue_master_locator = min-masters

    ## The default "guest" user is only permitted to access the server
    ## via a loopback interface (e.g. localhost)
    ## See http://www.rabbitmq.com/access-control.html#loopback-users
    loopback_users.guest = false

    ## Randomized startup delay in such scenarios can use a significantly lower delay value range (e.g. 0 to 1 second):
    cluster_formation.randomized_startup_delay_range.min = 0
    cluster_formation.randomized_startup_delay_range.max = 2

    # management.load_definitions = /etc/definitions/definitions.json
  definitions.json: |
    {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: non-mirror-rabbit
  namespace: production 
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: endpoint-reader
  namespace: production 
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: non-mirror-rabbit-endpoint-reader
  namespace: production
subjects:
- kind: ServiceAccount
  name: non-mirror-rabbit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: endpoint-reader
---
kind: Service
apiVersion: v1
metadata:
  name: non-mirror-rabbit-headless
  namespace: production
  labels:
    app: rabbitmq-ha
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true 
  ports: 
    - name: amqp
      protocol: TCP
      port: 5672
      targetPort: amqp
    - name: http
      protocol: TCP
      port: 15672
      targetPort: http
    - name: clitool
      protocol: TCP
      port: 25672
      targetPort: clitool
    - name: epmd
      protocol: TCP
      port: 4369
      targetPort: epmd
  selector:
    app: rabbitmq-ha
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: non-mirror-rabbit
  namespace: production
spec:
  serviceName: non-mirror-rabbit-headless
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: non-mirror-rabbit
  replicas: 5
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: non-mirror-rabbit
    spec:
      serviceAccountName: non-mirror-rabbit
      terminationGracePeriodSeconds: 10
      containers:
      - name: rabbitmq
        image: rabbitmq:3.7.15-alpine
        imagePullPolicy: IfNotPresent
        ports:
          - name: epmd
            protocol: TCP
            containerPort: 4369
          - name: amqp
            protocol: TCP
            containerPort: 5672
          - name: http
            protocol: TCP
            containerPort: 15672
          - name: clitool
            protocol: TCP
            containerPort: 25672
        resources:
          limits:
            cpu: "1000m"
            memory: "2048Mi"
          requests:
            cpu: "300m"
            memory: "512Mi"
        volumeMounts:
          - name: config-volume
            mountPath: /etc/rabbitmq
          # - name: definitions-volume
          #   mountPath: /etc/definitions
          - name: non-mirror-rabbit-pvc
            mountPath: /var/lib/rabbitmq
        livenessProbe:
          exec:
            command:  # Authorization => echo -n username:password | base64
              - /bin/sh
              - -c
              - 'wget -O - -q --header "Authorization: Basic Z3Vlc3Q6Z3Vlc3Q=" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - 'wget -O - -q --header "Authorization: Basic Z3Vlc3Q6Z3Vlc3Q=" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 5
        env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          # 取代 cluster_formation.k8s.service_name 設定
          - name: K8S_SERVICE_NAME
            value: rabbitmq-ha-headless
          # 取代 cluster_formation.k8s.hostname_suffix
          - name: K8S_HOSTNAME_SUFFIX
            value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
          - name: RABBITMQ_NODENAME
            value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
          - name: RABBITMQ_ERLANG_COOKIE
            value: "rubatomqcookie"
      volumes:
        - name: config-volume
          configMap:
            name: rabbitmq-ha-config
            items:
            - key: rabbitmq.conf
              path: rabbitmq.conf
            - key: enabled_plugins
              path: enabled_plugins
        # - name: definitions-volume
        #   configMap:
        #     name: rabbitmq-ha-config
        #     items:
        #     - key: definitions.json
        #       path: definitions.json
  volumeClaimTemplates:
    - metadata:
        name: non-mirror-rabbit-pvc
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"